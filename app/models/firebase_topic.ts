import vine from "@vinejs/vine";
import { DateTime } from "luxon";

import { BaseModel } from "@adonisjs/lucid/orm";
import db from "@adonisjs/lucid/services/db";
import { ModelAttributes } from "@adonisjs/lucid/types/model";

import { typedColumn } from "#decorators/typed_model";
import { preloadRelations } from "#scopes/preload_helper";
import { handleSearchQuery } from "#scopes/search_helper";
import { handleSortQuery } from "#scopes/sort_helper";

export interface TopicOverview {
  activeTopics: string[];
  deactivatedTopics: string[];
}

/**
 * This is a Firebase limitation - less than 900 characters and the limited charset (a-zA-Z0-9-_.~%)
 */
export const TOPIC_NAME_REGEX = /^[a-zA-Z0-9-_.~%]{1,900}$/;

export default class FirebaseTopic extends BaseModel {
  // Overall, updating the topic or removing it can lead to sync errors between us and the mobile application
  // Thus a created topic cannot be deleted or have its name changed - only deactivation is permitted

  @typedColumn({
    isPrimary: true,
    type: "string",
    autoGenerated: false,
    validator: vine.string().regex(TOPIC_NAME_REGEX),
  })
  declare topicName: string;

  @typedColumn({ type: "boolean", hasDefault: true })
  declare isActive: boolean;

  // Notes when a topic was deactivated - if the topic is active, this field is empty
  @typedColumn.dateTime({ optional: true, autoGenerated: true })
  declare deactivatedAt: DateTime | null;

  @typedColumn({ optional: true, type: "string" })
  declare description: string | null;

  @typedColumn.dateTime({ autoCreate: true })
  declare createdAt: DateTime;

  @typedColumn.dateTime({ autoCreate: true, autoUpdate: true })
  declare updatedAt: DateTime;

  /**
   * Use this method to manipulate the deactivatedAt field of manual updates
   */
  public static ensureStateValidity(
    toValidate: Partial<ModelAttributes<FirebaseTopic>>,
  ) {
    if (toValidate.isActive !== undefined) {
      toValidate.deactivatedAt = toValidate.isActive ? null : DateTime.now();
    }
  }

  /**
   * Get the list of all active topics and the list of all topics that are deactivated and their
   * deactivation has taken place in the timeframe from the given date till now
   * @param deactivatedSince cutoff for the deactivation date - if the topic was deactivated before this date, it will not be returned
   * @returns {TopicOverview} object with the current state of the topics
   */
  public static async getTopicOverview(
    deactivatedSince: DateTime,
  ): Promise<TopicOverview> {
    const result = await db.rawQuery<{
      rows: TopicOverview[];
    }>("SELECT * FROM get_fb_topic_state(?)", [deactivatedSince.toSQL()], {
      mode: "read",
    });
    return result.rows[0];
  }

  /**
   * Returns a Set of invalid topics (missing or deactivated) or null if all topics are valid
   * @param topics list of topics to check
   */
  public static async verifyTopics(
    topics: Set<string>,
  ): Promise<Set<string> | null> {
    const databaseState = await FirebaseTopic.query()
      .whereIn("topic_name", [...topics])
      .andWhere("is_active", true);
    const activeTopics = new Set<string>(
      databaseState.map((fb) => fb.topicName),
    );
    if (activeTopics.size !== topics.size) {
      // Some of the topics given are not active or do not exist
      return topics.difference(activeTopics);
    }
    return null;
  }

  static preloadRelations = preloadRelations();
  static handleSearchQuery = handleSearchQuery();
  static handleSortQuery = handleSortQuery();
}
